@startuml
actor "Service Employee" as user
entity "Device with Instrument Server" as is_mqtt
entity "MQTT Broker" as broker
box "RegistrationServer MQTT"
entity "Mqtt Client Actor" as listener
entity "MQTT Device Actor" as mqtt_actor
database "Host List" as h_list
database "Device List" as d_list
end box
listener -> broker : setup and connect
listener -> broker : unsubsribe to topic "+/meta"
listener -> broker : subsribe to topic "+/meta"
user -> is_mqtt : connect to local network
is_mqtt -> broker : connect\nwith LWT message "<is_id>/meta = {"State": 0}"
is_mqtt -> broker : publish "<is_id>/meta = {"State": 2, ...}"\nwith retain=True
broker -> listener : rely the retained message of the topic\n"<is_id>/meta"
listener -> h_list : create a description file for the is_id
listener -> broker : subsribe to topic "<is_id>/+/meta"
is_mqtt -> broker : publish "<is_id>/<instrument_id>/meta = {"State": 2, ...}"\nwith retain=True
broker -> listener : rely the retained message of the topic\n"<is_id>/<instrument_id>/meta"
listener -> mqtt_actor : create a device actor to receive commands/data\nif the instrument server is_id is already added
listener -> mqtt_actor : ask the mqtt actor to setup itself\nand then prepare itself for the future works
mqtt_actor -> d_list : create a description file\nfor the "instrument_id.SARAD_Type.mqtt"
is_mqtt -> broker : subscribe to topic "+/+/control"
user -> is_mqtt : disconnects from network
is_mqtt -> broker : ungracefully disconnected from the broker
broker -> listener : send the LWT message\n"<is_id>/meta = {"State": 0}"
listener -> h_list : remove the files of this host and its instruments
listener -> broker : unsubsribe to topic "<is_id>/+/meta"
listener -> mqtt_actor: destroy
@enduml
