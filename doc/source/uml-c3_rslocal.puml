@startuml
!include <c4/C4_Component.puml>
!include <office/Users/user.puml>

hide stereotype

'AddTagSupport("mod", $borderColor="#d73027")

!$app = "SARAD-App"
!$instr = "SARAD-Instrument"
!$instr_m = "SARAD-Instrumente"

Container(app, $app, "wählt ein $instr zur Kommunikation aus.")

Container_Boundary(mod, "Lokal-Modul") {
        Component(listener, "Win/Unix Listener", "Python Class", "Erkennt neue USB-Geräte.")
        Component(cluster_actor, "Cluster Actor", "Actor", "erkennt $instr_m, stellt Kommunikationsfunktionen bereit")
        Component(device_actor1, "Device Actor A", "usb_actor")
}
Container_Boundary(rs, "Basis") {
        Component(api, "REST API", "JSON/HTTP", "Geräteliste mit Status")
        Component(redirector1, "Redirector Actor A", "Actor", "TCP Socket")
}

Container(inst, $instr, "(virtueller) COM-Port mit SARAD-Protokoll")

Rel(inst, listener, "1. erkennt Gerät", "USB")
Rel(listener, cluster_actor, "2. InstrAddedMsg/InstrRemovedMsg", "message")
Rel(inst, cluster_actor, "3. erkennt $instr", "USB/RS-232 Polling")
Rel(cluster_actor, device_actor1, "4. erzeugt", "createActor")
Rel(cluster_actor, device_actor1, "5. SetupMsg", "message")
Rel(cluster_actor, device_actor1, "6. SetDeviceStatusMsg", "message")
Rel(api, app, "7. GET list", "JSON/HTTP")
Rel(app, api, "8. GET reserve", "JSON/HTTP")
Rel(api, device_actor1, "9. ReserveDeviceMsg", "Message")
Rel(device_actor1, redirector1, "10. erzeugt", "createActor")
BiRel(app, redirector1, "11. Binärpaket", "TCP-Socket")
BiRel(redirector1, device_actor1, "11. Binärpaket", "Messages")
BiRel(device_actor1, cluster_actor, "11. TxBinaryMsg", "Messages")
BiRel(inst, cluster_actor, "11. Binärpaket", "COM-Port")
@enduml
