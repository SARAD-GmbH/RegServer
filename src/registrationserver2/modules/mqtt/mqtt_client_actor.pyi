from appdirs import AppDirs as AppDirs
from registrationserver2 import actor_system as actor_system, theLogger as theLogger
from registrationserver2.modules.mqtt import MQTT_ACTOR_ADRs as MQTT_ACTOR_ADRs, MQTT_CLIENT_RESULTs as MQTT_CLIENT_RESULTs
from registrationserver2.modules.mqtt.message import RETURN_MESSAGES as RETURN_MESSAGES
from registrationserver2.modules.mqtt.mqtt_subscriber import SARAD_MQTT_SUBSCRIBER as SARAD_MQTT_SUBSCRIBER
from thespian.actors import Actor, ActorAddress as ActorAddress, ActorExitRequest as ActorExitRequest
from typing import Any

class SaradMqttClient(Actor):
    ACCEPTED_MESSAGES: Any = ...
    mqtt_topic: str
    mqtt_payload: str
    mqtt_qos: int = ...
    mqtt_broker: str
    mqtt_cid: str
    rc_conn: Any = ...
    def on_connect(self, client: Any, userdata: Any, flags: Any, result_code: Any) -> None: ...
    rc_disc: Any = ...
    def on_disconnect(self, client: Any, userdata: Any, result_code: Any) -> None: ...
    rc_pub: int = ...
    def on_publish(self, client: Any, userdata: Any, mid: Any) -> None: ...
    rc_sub: int = ...
    def on_subscribe(self, client: Any, userdata: Any, mid: Any, grant_qos: Any) -> None: ...
    rc_uns: int = ...
    def on_unsubscribe(self, client: Any, userdata: Any, mid: Any) -> None: ...
    topic_parts: Any = ...
    len: Any = ...
    def on_message(self, client: Any, userdata: Any, message: Any) -> None: ...
    def receiveMessage(self, msg: Any, sender: Any) -> None: ...
    mqttc: Any = ...
    wait_cnt: int = ...
    def __connect__(self, msg: dict) -> dict: ...
    def __disconnect__(self, msg: dict) -> dict: ...
    def __kill__(self, msg: Any) -> None: ...
    def __publish__(self, msg: dict) -> dict: ...
    def __subscribe__(self, msg: dict) -> dict: ...
    def __unsubscribe__(self, msg: dict) -> dict: ...
    def signal_handler(self, sig: Any, frame: Any) -> None: ...
    def __init__(self) -> None: ...

SARAD_MQTT_CLIENT: ActorAddress
